{"version":3,"file":"ecsy.js","sources":["../src/utils/object-pool.ts","../src/component/dummy-object-pool.ts","../src/component/component-manager.ts","../src/utils/get-name.ts","../src/utils/query-key.ts","../src/entity/event-dispatcher.ts","../src/entity/query.ts","../src/entity/entity.ts","../src/entity/system-state-component.ts","../src/entity/entity-manager.ts","../src/entity/query-manager.ts","../src/system/can-execute.ts","../src/system/clear-events.ts","../src/system/system-manager.ts","../src/system/system.ts","../src/world.ts","../src/not.ts","../src/tag-component.ts","../src/schema/create-type.ts","../src/schema/standard-types.ts","../src/schema/infer-type.ts","../src/schema/create-component-class.ts","../src/version.ts"],"sourcesContent":["import { Pool } from '../pool.interface';\nimport { Resettable } from '../resettable.interface';\n\nexport class ObjectPool<T extends Resettable> implements Pool<T> {\n  count = 0;\n  private freeList: T[] = [];\n\n  private createElement: () => T;\n\n  // @todo Add initial size\n  constructor(\n    objectConstructor: new (...args) => T,\n    initialSize?: number,\n  ) {\n\n    let extraArgs = null;\n\n    if (arguments.length > 1) {\n      extraArgs = Array.prototype.slice.call(arguments);\n      extraArgs.shift();\n    }\n\n    this.createElement = extraArgs\n      ? () => new objectConstructor(...extraArgs)\n      : () => new objectConstructor();\n\n    if (typeof initialSize !== 'undefined') {\n      this.expand(initialSize);\n    }\n  }\n\n  aquire(): T {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    const item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item: T): void {\n    if (item.reset) {\n      item.reset();\n    }\n    this.freeList.push(item);\n  }\n\n  private expand(count: number): void {\n    for (let n = 0; n < count; n++) {\n      this.freeList.push(this.createElement());\n    }\n    this.count += count;\n  }\n\n  totalSize(): number {\n    return this.count;\n  }\n\n  totalFree(): number {\n    return this.freeList.length;\n  }\n\n  totalUsed(): number {\n    return this.count - this.freeList.length;\n  }\n}\n","import { Pool } from '../pool.interface';\nimport { Resettable } from '../resettable.interface';\n\nexport class DummyObjectPool<T extends Resettable> implements Pool<T> {\n  count = 0;\n  private used = 0;\n\n  constructor(\n    private objectConstructor: new (...args: any[]) => T\n  ) {}\n\n  aquire(): T {\n    this.used++;\n    this.count++;\n\n    return new this.objectConstructor();\n  }\n\n  release(): void {\n    this.used--;\n  }\n\n  totalSize(): number {\n    return this.count;\n  }\n\n  totalFree(): number {\n    return Infinity;\n  }\n\n  totalUsed(): number {\n    return this.used;\n  }\n}\n","import { Component, ComponentConstructor } from '../component.interface';\nimport { ObjectPool } from '../utils/object-pool';\nimport { Pool } from '../pool.interface';\nimport { DummyObjectPool } from './dummy-object-pool';\n\n// TODO: add removeComponent method\nexport class ComponentManager {\n  componentConstructors = new Set<ComponentConstructor>();\n  componentPool = new Map<ComponentConstructor, Pool<Component>>();\n\n  registerComponent(componentConstructor: ComponentConstructor): void {\n    if (this.componentConstructors.has(componentConstructor)) {\n      console.warn(`Component type: '${componentConstructor.name}' already registered.`);\n\n      return;\n    }\n\n    this.componentConstructors.add(componentConstructor);\n  }\n\n  componentAddedToEntity(componentConstructor: ComponentConstructor): void {\n    if (!this.componentConstructors.has(componentConstructor)) {\n      this.registerComponent(componentConstructor);\n    }\n  }\n\n  getComponentsPool(componentConstructor: ComponentConstructor): Pool<Component> {\n\n    if (!this.componentPool.has(componentConstructor)) {\n\n      if (componentConstructor.prototype.reset) {\n\n        this.componentPool.set(componentConstructor, new ObjectPool(componentConstructor));\n\n      } else {\n        console.warn(\n          `Component '${componentConstructor.name}' won't benefit from pooling because 'reset' method was not implemeneted.`\n        );\n\n        this.componentPool.set(componentConstructor, new DummyObjectPool(componentConstructor));\n      }\n    }\n\n    return this.componentPool.get(componentConstructor);\n  }\n}\n","import { ComponentConstructor } from '../component.interface';\n\n/**\n * Return the name of a component\n */\nexport function getName(componentConstructor: ComponentConstructor) {\n  return componentConstructor.name;\n}\n","import { Components } from '../component.interface';\nimport { getName } from './get-name';\n\n/**\n * Get a key from a list of components\n * @param Components Array of components to generate the key\n */\nexport function queryKey(componentConstructor: Components[]) {\n  const names = [];\n\n  for (const T of componentConstructor) {\n    if (typeof T === 'object') {\n      const operator = T.operator === 'not' ? '!' : T.operator;\n      names.push(operator + getName(T.component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names.sort().join('-');\n}\n","import { Component } from '../component.interface';\nimport { Entity } from './entity';\n\ntype Listener = (entity: Entity, component?: Component) => void;\n\n/**\n * EventDispatcher\n */\nexport class EventDispatcher<T> {\n  listeners = new Map<T, Listener[]>();\n\n  stats = {\n    fired: 0,\n    handled: 0\n  };\n\n  constructor() {\n  }\n\n  /**\n   * Add an event listener\n   * @param eventName Name of the event to listen\n   * @param listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName: T, listener: Listener) {\n    const listeners = this.listeners;\n\n    if (!listeners.has(eventName)) {\n      listeners.set(eventName, []);\n    }\n\n    const listenerArray = listeners.get(eventName);\n\n    if (listenerArray.indexOf(listener) === -1) {\n      listenerArray.push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param eventName Name of the event to check\n   * @param listener Callback for the specified event\n   */\n  hasEventListener(eventName: T, listener: Listener) {\n    return (\n      this.listeners.has(eventName) && this.listeners.get(eventName).indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param eventName Name of the event to remove\n   * @param listener Callback for the specified event\n   */\n  removeEventListener(eventName: T, listener: Listener) {\n    const listenerArray = this.listeners.get(eventName);\n\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param eventName Name of the event to dispatch\n   * @param entity (Optional) Entity to emit\n   */\n  dispatchEvent(eventName: T, entity?: Entity, component?: Component) {\n    this.stats.fired++;\n\n    const listenerArray = this.listeners.get(eventName);\n\n    if (listenerArray !== undefined) {\n      const array = listenerArray.slice(0);\n\n      for (const value of array) {\n        value.call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n","import { ComponentConstructor, Components } from '../component.interface';\nimport { Entity } from './entity';\nimport { EventDispatcher } from './event-dispatcher';\n\n// tslint:disable:no-bitwise\n\nexport enum QueryEvents {\n  ENTITY_ADDED,\n  ENTITY_REMOVED,\n  COMPONENT_CHANGED,\n}\n\nexport class Query {\n\n  componentConstructors: ComponentConstructor[] = [];\n  notComponentConstructor: ComponentConstructor[] = [];\n\n  entities: Entity[] = [];\n\n  eventDispatcher = new EventDispatcher<QueryEvents>();\n\n  // This query is being used by a reactive system\n  reactive = false;\n\n  /**\n   * @param componentConstructors List of types of components to query\n   */\n  constructor(\n    componentConstructors: Components[],\n    entities: Entity[],\n    public key: string,\n  ) {\n\n    componentConstructors.forEach((componentConstructor) => {\n      if (typeof componentConstructor === 'object') {\n        this.notComponentConstructor.push(componentConstructor.component);\n      } else {\n        this.componentConstructors.push(componentConstructor);\n      }\n    });\n\n    if (this.componentConstructors.length === 0) {\n      throw new Error('Can\\'t create a query without components');\n    }\n\n    // Fill the query with the existing entities\n    for (const entity of entities) {\n      if (this.match(entity)) {\n\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   */\n  addEntity(entity: Entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(QueryEvents.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   */\n  removeEntity(entity: Entity) {\n    let index = this.entities.indexOf(entity);\n\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(QueryEvents.ENTITY_REMOVED, entity);\n    }\n  }\n\n  match(entity: Entity) {\n    return (\n      entity.hasAllComponents(this.componentConstructors) &&\n      !entity.hasAnyComponents(this.notComponentConstructor)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.componentConstructors.map(C => C.name),\n        not: this.notComponentConstructor.map(C => C.name)\n      },\n      numEntities: this.entities.length\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.componentConstructors.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\n","import { Component, ComponentConstructor } from '../component.interface';\nimport { Resettable } from '../resettable.interface';\nimport { EntityManager } from './entity-manager';\nimport { Query, QueryEvents } from './query';\nimport { wrapImmutableComponent } from './wrap-immutable-component';\n\n// tslint:disable:no-bitwise\n\n// @todo Take this out from there or use ENV\nconst DEBUG = false;\n\nlet nextId = 0;\n\nexport class Entity implements Resettable {\n  // Unique ID for this entity\n  id = nextId++;\n\n  // List of components types the entity has\n  componentTypes = new Set<ComponentConstructor>();\n\n  // Instance of the components\n  components = new Map<string, Component>();\n\n  componentsToRemove = new Map<string, Component>();\n\n  // Queries where the entity is added\n  queries: Query[] = [];\n\n  // Used for deferred removal\n  componentTypesToRemove = new Set<ComponentConstructor>();\n\n  alive = false;\n\n  constructor(\n    public entityManager: EntityManager,\n  ) {}\n\n  // COMPONENTS\n\n  getComponent(componentConstructor: ComponentConstructor, includeRemoved?: boolean): Component {\n    let component = this.components.get(componentConstructor.name);\n\n    if (!component && includeRemoved === true) {\n      component = this.componentsToRemove.get(componentConstructor.name);\n    }\n\n    return DEBUG ? wrapImmutableComponent(component) : component;\n  }\n\n  getMutableComponent(componentConstructor: ComponentConstructor): Component {\n    const component = this.components.get(componentConstructor.name);\n\n    for (const query of this.queries) {\n\n      // @todo accelerate this check. Maybe having query._Components as an object\n      if (query.reactive && query.componentConstructors.indexOf(componentConstructor) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          QueryEvents.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Once a component is removed from an entity, it is possible to access its contents\n   */\n  getRemovedComponent(componentConstructor: ComponentConstructor): Component {\n    return this.componentsToRemove.get(componentConstructor.name);\n  }\n\n  getComponents(): Map<string, Component> {\n    return this.components;\n  }\n\n  getComponentsToRemove(): Map<string, Component> {\n    return this.componentsToRemove;\n  }\n\n  getComponentTypes(): Set<ComponentConstructor> {\n    return this.componentTypes;\n  }\n\n\n  addComponent(componentConstructor: ComponentConstructor, values?: { [key: string]: any }): this {\n    this.entityManager.entityAddComponent(this, componentConstructor, values);\n\n    return this;\n  }\n\n  /**\n   * This will mark the component to be removed and will populate all the queues from the\n   * systems that are listening to that event, but the component itself won't be disposed\n   * until the end of the frame, we call it deferred removal. This is done so systems that\n   * need to react to it can still access the data of the components.\n   */\n  removeComponent(componentConstructor: ComponentConstructor, forceRemove?: boolean): this {\n    this.entityManager.entityRemoveComponent(this, componentConstructor, forceRemove);\n\n    return this;\n  }\n\n  hasComponent(componentConstructor: ComponentConstructor, includeRemoved?: boolean): boolean {\n    return (\n      this.componentTypes.has(componentConstructor) ||\n      (includeRemoved === true && this.hasRemovedComponent(componentConstructor))\n    );\n  }\n\n  hasRemovedComponent(componentConstructor: ComponentConstructor): boolean {\n    return this.componentTypesToRemove.has(componentConstructor);\n  }\n\n  hasAllComponents(componentConstructors: ComponentConstructor[]): boolean {\n    for (const component of componentConstructors) {\n      if (!this.hasComponent(component)) { return false; }\n    }\n\n    return true;\n  }\n\n  hasAnyComponents(componentConstructors: ComponentConstructor[]): boolean {\n    for (const component of componentConstructors) {\n      if (this.hasComponent(component)) { return true; }\n    }\n\n    return false;\n  }\n\n  removeAllComponents(forceRemove?: boolean) {\n    return this.entityManager.entityRemoveAllComponents(this, forceRemove);\n  }\n\n  // EXTRAS\n\n  // Initialize the entity. To be used when returning an entity to the pool\n  reset() {\n    this.id = nextId++;\n    this.entityManager = null;\n    this.componentTypes.clear();\n    this.queries.length = 0;\n    this.components.clear();\n  }\n\n  remove(forceRemove?: boolean) {\n    return this.entityManager.removeEntity(this, forceRemove);\n  }\n}\n","\n/**\n * Components that extend the SystemStateComponent are not removed when an entity is deleted.\n *\n * System State Components (SSC) are components used by a system to hold internal resources\n * for an entity. They are not removed when you delete the entity, you must explicitly remove\n * them when you are done with them. They can be used to detect when an entity has been added\n * or removed from a query.\n */\nexport class SystemStateComponent {\n  static isSystemStateComponent = true;\n}\n\n","import { ComponentManager } from '../component';\nimport { ComponentConstructor, Components } from '../component.interface';\nimport { getName } from '../utils';\nimport { ObjectPool } from '../utils/object-pool';\nimport { Entity } from './entity';\nimport { EventDispatcher } from './event-dispatcher';\nimport { Query } from './query';\nimport { QueryManager } from './query-manager';\nimport { SystemStateComponent } from './system-state-component';\n\n// tslint:disable:no-bitwise\n\nexport enum EntityManagerEvents {\n  ENTITY_CREATED,\n  ENTITY_REMOVED,\n  COMPONENT_ADDED,\n  COMPONENT_REMOVE,\n}\n\n/**\n * EntityManager\n */\nexport class EntityManager {\n\n  // All the entities in this instance\n  entities: Entity[] = [];\n\n  eventDispatcher = new EventDispatcher<EntityManagerEvents>();\n  entityPool = new ObjectPool<Entity>(Entity);\n\n  // Deferred deletion\n  entitiesWithComponentsToRemove = new Set<Entity>();\n  entitiesToRemove: Entity[] = [];\n  deferredRemovalEnabled = true;\n\n  numStateComponents = 0;\n\n  constructor(\n    private componentManager: ComponentManager,\n    private queryManager: QueryManager,\n  ) {}\n\n  /**\n   * Create a new entity\n   */\n  createEntity(): Entity {\n    const entity = this.entityPool.aquire();\n\n    entity.alive = true;\n    entity.entityManager = this;\n    this.entities.push(entity);\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.ENTITY_CREATED, entity);\n\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param entity Entity where the component will be added\n   * @param componentConstructor Component to be added to the entity\n   * @param values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity: Entity, componentConstructor: ComponentConstructor, values?: { [key: string]: any }): void {\n\n    if (entity.componentTypes.has(componentConstructor)) {\n\n      return;\n    }\n\n    entity.componentTypes.add(componentConstructor);\n\n    if ((componentConstructor as any).__proto__ === SystemStateComponent) {\n      this.numStateComponents++;\n    }\n\n    const componentPool = this.componentManager.getComponentsPool(\n      componentConstructor\n    );\n\n    const componentFromPool = componentPool.aquire();\n\n    entity.components.set(componentConstructor.name, componentFromPool);\n\n    if (values) {\n      if (componentFromPool.copy) {\n        componentFromPool.copy(values);\n      } else {\n        for (const name in values) {\n          if (values.hasOwnProperty(name)) {\n            componentFromPool[name] = values[name];\n          }\n        }\n      }\n    }\n\n    this.queryManager.onEntityComponentAdded(entity, componentConstructor);\n    this.componentManager.componentAddedToEntity(componentConstructor);\n\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.COMPONENT_ADDED, entity, componentConstructor);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param entity Entity which will get removed the component\n   * @param componentConstructor Component to remove from the entity\n   * @param immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity: Entity, componentConstructor: ComponentConstructor, immediately?: boolean): void {\n    if (!entity.componentTypes.has(componentConstructor)) {\n\n      return;\n    }\n\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.COMPONENT_REMOVE, entity, componentConstructor);\n\n    if (immediately) {\n\n      this.entityRemoveComponentSync(entity, componentConstructor);\n\n    } else {\n\n      if (entity.componentTypesToRemove.size === 0) {\n        this.entitiesWithComponentsToRemove.add(entity);\n      }\n\n      entity.componentTypes.delete(componentConstructor);\n      entity.componentTypesToRemove.add(componentConstructor);\n\n      const componentName = getName(componentConstructor);\n      entity.componentsToRemove.set(componentName, entity.components.get(componentName));\n\n      entity.components.delete(componentName);\n\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this.queryManager.onEntityComponentRemoved(entity, componentConstructor);\n\n    if ((componentConstructor as any).__proto__ === SystemStateComponent) {\n      this.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (this.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  entityRemoveComponentSync(entity: Entity, componentConstructor: ComponentConstructor): void {\n    // Remove T listing on entity and property ref, then free the component.\n    entity.componentTypes.delete(componentConstructor);\n    const componentName = getName(componentConstructor);\n    const componentEntity = entity.components.get(componentName);\n    entity.components.delete(componentName);\n\n    this.componentManager.componentPool.get(componentConstructor).release(componentEntity);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity: Entity, immediately?: boolean): void {\n    for (const componentType of entity.componentTypes) {\n      if ((componentType as any).__proto__ !== SystemStateComponent) {\n        this.entityRemoveComponent(entity, componentType, immediately);\n      }\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param entity Entity to remove from the manager\n   * @param immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity: Entity, immediately?: boolean): void {\n    const index = this.entities.indexOf(entity);\n\n    if (!~index) { throw new Error('Tried to remove entity not in list'); }\n\n    entity.alive = false;\n\n    if (this.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(EntityManagerEvents.ENTITY_REMOVED, entity);\n      this.queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this.releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n\n    this.entityRemoveAllComponents(entity, immediately);\n  }\n\n  private releaseEntity(entity: Entity, index): void {\n    this.entities.splice(index, 1);\n\n    // Prevent any access and free\n    entity.entityManager = null;\n    this.entityPool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities(): void {\n    for (let i = this.entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this.entities[i]);\n    }\n  }\n\n  processDeferredRemoval(): void {\n    if (!this.deferredRemovalEnabled) {\n      return;\n    }\n\n    for (const entity of this.entitiesToRemove) {\n      const index = this.entities.indexOf(entity);\n      this.releaseEntity(entity, index);\n    }\n\n    this.entitiesToRemove.length = 0;\n\n    for (const entity of this.entitiesWithComponentsToRemove) {\n      for (const componentTypeToRemove of entity.componentTypesToRemove) {\n\n        const componentName = getName(componentTypeToRemove);\n\n        const component = entity.componentsToRemove.get(componentName);\n        entity.componentsToRemove.delete(componentName);\n\n        this.componentManager.componentPool.get(componentTypeToRemove).release(component);\n      }\n\n      entity.componentTypesToRemove.clear();\n    }\n\n    this.entitiesWithComponentsToRemove.clear();\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param componentConstructors List of components that will form the query\n   */\n  getQuery(componentConstructors: Components[]): Query {\n    return this.queryManager.getQuery(componentConstructors, this.entities);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count(): number {\n    return this.entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    const stats = {\n      numEntities: this.entities.length,\n      numQueries: Object.keys(this.queryManager.queries).length,\n      queries: this.queryManager.stats(),\n      numComponentPool: Object.keys(this.componentManager.componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats\n    };\n\n    for (const [cname, _] of this.componentManager.componentPool) {\n\n      const pool = this.componentManager.componentPool.get(cname);\n      stats.componentPool[cname.name] = {\n        used: pool.totalUsed(),\n        size: pool.count\n      };\n\n    }\n\n    return stats;\n  }\n}\n\n","import { ComponentConstructor, Components } from '../component.interface';\nimport { queryKey } from '../utils';\nimport { Entity } from './entity';\nimport { Query } from './query';\n\n// tslint:disable:no-bitwise\n\n/**\n * QueryManager\n */\nexport class QueryManager {\n  // Queries indexed by a unique identifier for the components it has\n  queries = new Map<string, Query>();\n\n  constructor() {}\n\n  onEntityRemoved(entity: Entity): void {\n    for (const [_, query] of this.queries) {\n\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param entity Entity that just got the new component\n   * @param componentConstructor Component added to the entity\n   */\n  onEntityComponentAdded(entity: Entity, componentConstructor: ComponentConstructor): void {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (const [_, query] of this.queries) {\n\n        if (\n          !!~query.notComponentConstructor.indexOf(componentConstructor) &&\n          ~query.entities.indexOf(entity)\n        ) {\n          query.removeEntity(entity);\n          continue;\n        }\n\n        // Add the entity only if:\n        // Component is in the query\n        // and Entity has ALL the components of the query\n        // and Entity is not already in the query\n        if (\n          !~query.componentConstructors.indexOf(componentConstructor) ||\n          !query.match(entity) ||\n          ~query.entities.indexOf(entity)\n        ) {\n          continue;\n        }\n\n\n\n        query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param entity Entity to remove the component from\n   * @param componentConstructor Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity: Entity, componentConstructor: ComponentConstructor): void {\n    for (const [_, query] of this.queries) {\n\n      if (\n        !!~query.notComponentConstructor.indexOf(componentConstructor) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.componentConstructors.indexOf(componentConstructor) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param componentConstructors Components that the query should have\n   */\n  getQuery(componentConstructors: Components[], entities: Entity[]): Query {\n    const key = queryKey(componentConstructors);\n\n    let query = this.queries.get(key);\n\n    if (!query) {\n      query = new Query(componentConstructors, entities, key);\n\n      this.queries.set(key, query);\n    }\n\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats(): { [key: string]: Query; } {\n    const stats = {};\n    for (const [queryName, query] of this.queries) {\n\n      stats[queryName] = query.stats();\n    }\n\n    return stats;\n  }\n}\n","import { System } from './system';\r\n\r\n\r\nexport const canExecute = (system: System) => {\r\n  if (system.mandatoryQueries.length === 0) { return true; }\r\n\r\n  for (const query of system.mandatoryQueries) {\r\n    if (query.entities.length === 0) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","import { System } from './system';\r\n\r\nexport const clearEvents = (system: System) => {\r\n\r\n  for (const queryName in system.queries) {\r\n    if (system.queries.hasOwnProperty(queryName)) {\r\n\r\n      const query = system.queries[queryName];\r\n\r\n      if (query.added) {\r\n        query.added.length = 0;\r\n      }\r\n\r\n      if (query.removed) {\r\n        query.removed.length = 0;\r\n      }\r\n\r\n      if (query.changed) {\r\n        if (Array.isArray(query.changed)) {\r\n\r\n          query.changed.length = 0;\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { ComponentConstructor } from '../component.interface';\r\nimport { EntityManager } from '../entity';\r\nimport { QueryEvents } from '../entity/query';\r\nimport { SystemConstructor } from '../system.interface';\r\nimport { canExecute } from './can-execute';\r\nimport { clearEvents } from './clear-events';\r\nimport { System } from './system';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport class SystemManager {\r\n  systems = new Map<SystemConstructor<System>, System>();\r\n\r\n  // order is important\r\n  private executeSystems: System[] = []; // Systems that have `execute` method\r\n\r\n  lastExecutedSystem = null;\r\n\r\n  constructor(\r\n    private entityManager: EntityManager,\r\n  ) {}\r\n\r\n  registerSystem(systemConstructor: SystemConstructor<System>, attributes?: any) {\r\n    if (this.systems.has(systemConstructor)) {\r\n      console.warn(`System '${systemConstructor.name}' already registered.`);\r\n\r\n      return this;\r\n    }\r\n\r\n    const system = new systemConstructor();\r\n\r\n    // ----------\r\n\r\n    if (attributes && attributes.priority) {\r\n      system.priority = attributes.priority;\r\n    }\r\n\r\n\r\n\r\n    if (systemConstructor.queries) {\r\n      system.queriesOther = [];\r\n      system.queries = {};\r\n\r\n      for (const queryName in systemConstructor.queries) {\r\n        if (systemConstructor.queries.hasOwnProperty(queryName)) {\r\n\r\n          const queryConfig = systemConstructor.queries[queryName];\r\n\r\n          const components = queryConfig.components;\r\n\r\n          if (!components || components.length === 0) {\r\n            throw new Error('\\'components\\' attribute can\\'t be empty in a query');\r\n          }\r\n\r\n          const query = this.entityManager.getQuery(components);\r\n\r\n          system.queriesOther[queryName] = query;\r\n\r\n          if (queryConfig.mandatory === true) {\r\n            system.mandatoryQueries.push(query);\r\n          }\r\n\r\n          system.queries[queryName] = {\r\n            results: query.entities\r\n          };\r\n\r\n          const events = {\r\n            added: () => {\r\n              const eventList = (system.queries[queryName].added = []);\r\n\r\n              query.eventDispatcher.addEventListener(QueryEvents.ENTITY_ADDED,\r\n                (entity) => {\r\n\r\n                  // @fixme overhead?\r\n                  if (eventList.indexOf(entity) === -1) {\r\n\r\n                    eventList.push(entity);\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            removed: () => {\r\n              const eventList = (system.queries[queryName].removed = []);\r\n\r\n              query.eventDispatcher.addEventListener(QueryEvents.ENTITY_REMOVED,\r\n                (entity) => {\r\n\r\n                  // @fixme overhead?\r\n                  if (eventList.indexOf(entity) === -1) {\r\n\r\n                    eventList.push(entity);\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            changed: () => {\r\n              const event = queryConfig.listen.changed;\r\n\r\n              query.reactive = true;\r\n              if (event === true) {\r\n                // Any change on the entity from the components in the query\r\n                const eventList = (system.queries[queryName].changed = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  QueryEvents.COMPONENT_CHANGED,\r\n                  (entity) => {\r\n                    // Avoid duplicates\r\n                    if (eventList.indexOf(entity) === -1) {\r\n                      eventList.push(entity);\r\n                    }\r\n                  }\r\n                );\r\n              } else if (Array.isArray(event)) {\r\n                const eventList = (system.queries[queryName].changed = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  QueryEvents.COMPONENT_CHANGED,\r\n                  (entity, changedComponent) => {\r\n                    // Avoid duplicates\r\n                    if (\r\n                      event.indexOf(changedComponent.constructor as ComponentConstructor) !== -1 &&\r\n                      eventList.indexOf(entity) === -1\r\n                    ) {\r\n                      eventList.push(entity);\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                /*\r\n                // Checking just specific components\r\n                let changedList = (this.queries[queryName][eventName] = {});\r\n                event.forEach(component => {\r\n                  let eventList = (changedList[\r\n                    componentPropertyName(component)\r\n                  ] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity, changedComponent) => {\r\n                      if (\r\n                        changedComponent.constructor === component &&\r\n                        eventList.indexOf(entity) === -1\r\n                      ) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                });\r\n                */\r\n              }\r\n            }\r\n          };\r\n\r\n          if (queryConfig.listen) {\r\n            for (const eventName in queryConfig.listen) {\r\n              if (queryConfig.listen.hasOwnProperty(eventName) && events[eventName]) {\r\n                events[eventName]();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // ----------\r\n\r\n    if (system.init) {\r\n      system.init();\r\n    }\r\n\r\n    system.order = this.systems.size;\r\n    this.systems.set(systemConstructor, system);\r\n\r\n    if (system.run) {\r\n      this.executeSystems.push(system);\r\n      this.sortSystems();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  sortSystems() {\r\n    this.executeSystems.sort((a, b) => {\r\n      return a.priority - b.priority || a.order - b.order;\r\n    });\r\n  }\r\n\r\n  getSystem(systemConstructor: SystemConstructor<System>): System {\r\n    return this.systems.get(systemConstructor);\r\n  }\r\n\r\n  getSystems(): Map<SystemConstructor<System>, System> {\r\n    return this.systems;\r\n  }\r\n\r\n  removeSystem(systemConstructor: SystemConstructor<System>): void {\r\n    this.systems.delete(systemConstructor);\r\n  }\r\n\r\n  runSystem(system: System): void {\r\n\r\n    if (system.initialized) {\r\n      if (canExecute(system)) {\r\n        const startTime = performance.now(); // ! debag performance\r\n\r\n        // main run;\r\n        system.run();\r\n\r\n        system.executeTime = performance.now() - startTime; // ! debag performance\r\n        this.lastExecutedSystem = system;\r\n\r\n        clearEvents(system);\r\n      }\r\n    }\r\n  }\r\n\r\n  stop(): void {\r\n    for (const system of this.executeSystems) {\r\n      system.stop();\r\n      system.executeTime = 0; // ! debag performance\r\n    }\r\n  }\r\n\r\n  run(forcePlay?: boolean): void {\r\n    for (const system of this.executeSystems) {\r\n      if (forcePlay || system.enabled) {\r\n        this.runSystem(system);\r\n      }\r\n    }\r\n  }\r\n\r\n  stats() {\r\n    const stats = {\r\n      numSystems: this.systems.size,\r\n      systems: {}\r\n    };\r\n\r\n    for (const system of this.systems) {\r\n      const systemStats = (stats.systems[system.constructor.name] = {\r\n        queries: {}\r\n      });\r\n\r\n      for (const name in (system as any).ctx) {\r\n        if ((system as any).ctx.hasOwnProperty(name)) {\r\n          systemStats.queries[name] = (system as any).ctx[name].stats();\r\n        }\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n","import { Query } from '../system.interface';\nimport { Entity } from 'src/entity';\n\nexport interface ResultQuery {\n  [key: string]: {\n    /**\n     * All the entities with selected component\n     */\n    results: Entity[];\n    /**\n     * All the entities added to the query since the last call\n     */\n    added?: Entity[];\n    /**\n     * All the entities removed from the query since the last call\n     */\n    removed?: Entity[];\n    /**\n     * All the entities which selected components have changed since the last call\n     */\n    changed?: Entity[];\n  }\n}\n\n/**\n * A system that manipulates entities in the world.\n * Every run systems are executed and they create, remove or modify entities and components.\n */\nexport abstract class System {\n\n  static queries?: Query;\n\n  /**\n   * Whether the system will execute during the world tick.\n   */\n  enabled = true;\n  initialized = true;\n\n  queriesOther = {};\n  queries: ResultQuery = {};\n\n  mandatoryQueries = [];\n\n  priority = 0;\n  order = 0;\n\n  executeTime?: number;\n\n  /**\n   * It will get called each run by default (unless a custom scheduler is being used).\n   * Usually it will be used to loop through the lists of entities from each query and\n   * process the value of theirs components.\n   */\n  run?(): void;\n\n  /**\n   * This function is called when the system is registered in a world (Calling `world.registerSystem`)\n   * and can be used to initialize anything the system needs.\n   */\n  init?(): void;\n\n  /**\n   * Resume execution of this system.\n   */\n  play() {\n    this.enabled = true;\n  }\n\n  /**\n   * Stop execution of this system.\n   */\n  stop() {\n    this.enabled = false;\n  }\n}\n","import { ComponentManager } from './component';\r\nimport { ComponentConstructor } from './component.interface';\r\nimport { Entity, EntityManager } from './entity';\r\nimport { QueryManager } from './entity/query-manager';\r\nimport { System, SystemManager } from './system';\r\nimport { SystemConstructor } from './system.interface';\r\n\r\n/**\r\n * The World is the root of the ECS.\r\n */\r\nexport class World {\r\n\r\n  enabled = true;\r\n\r\n  eventQueues = {};\r\n\r\n  lastTime = performance.now();\r\n\r\n  /**\r\n   * Create a new World.\r\n   */\r\n  constructor(\r\n    public componentsManager = new ComponentManager(),\r\n    public entityManager = new EntityManager(componentsManager, new QueryManager()),\r\n    public systemManager = new SystemManager(entityManager),\r\n  ) {}\r\n\r\n  /**\r\n   * Register a component.\r\n   * @param component Type of component to register\r\n   */\r\n  registerComponent(component: ComponentConstructor): this {\r\n    this.componentsManager.registerComponent(component);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Register a system.\r\n   * @param system Type of system to register\r\n   */\r\n  registerSystem<T extends System>(system: SystemConstructor<T>, attributes?: any): this {\r\n    this.systemManager.registerSystem(system, attributes);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a system registered in this world.\r\n   * @param System Type of system to get.\r\n   */\r\n  getSystem<T extends System>(SystemClass: SystemConstructor<T>): System {\r\n    return this.systemManager.getSystem(SystemClass);\r\n  }\r\n\r\n  /**\r\n   * Get a list of systems registered in this world.\r\n   */\r\n  getSystems(): Map<SystemConstructor<any>, System> {\r\n    return this.systemManager.getSystems();\r\n  }\r\n\r\n  /**\r\n   * Update the systems.\r\n   */\r\n  run(): void {\r\n    if (this.enabled) {\r\n      this.systemManager.run();\r\n      this.entityManager.processDeferredRemoval();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop execution of this world.\r\n   */\r\n  stop(): void {\r\n    this.enabled = false;\r\n  }\r\n\r\n  /**\r\n   * Resume execution of this world.\r\n   */\r\n  play(): void {\r\n    this.enabled = true;\r\n  }\r\n\r\n  /**\r\n   * Create a new entity\r\n   */\r\n  createEntity(): Entity {\r\n    return this.entityManager.createEntity();\r\n  }\r\n\r\n  stats() {\r\n    const stats = {\r\n      entities: this.entityManager.stats(),\r\n      system: this.systemManager.stats()\r\n    };\r\n\r\n    console.log(JSON.stringify(stats, null, 2));\r\n  }\r\n}\r\n","import { ComponentConstructor } from './component.interface';\n\n/**\n * Use the Not class to negate a component query.\n */\nexport const Not = (component: ComponentConstructor): NotComponent => ({\n  operator: 'not',\n  component,\n});\n\nexport interface NotComponent {\n  operator: 'not';\n  component: ComponentConstructor;\n}\n","/**\n * Create components that extend TagComponent in order to take advantage of performance optimizations for components\n * that do not store data\n */\nexport class TagComponent {\n  reset() {}\n}\n","\nexport interface TypeDefinition<T> {\n  baseType?: T;\n  isType?: boolean;\n  isSimpleType?: boolean;\n  create(defaultValue): void;\n  reset(src, key, defaultValue): void;\n  clear(src, key): void;\n  copy?(src, dst, key): void;\n}\n\nexport function createType<T>(typeDefinition: TypeDefinition<T>): TypeDefinition<T> {\n  const mandatoryFunctions = [\n    'create',\n    'reset',\n    'clear'\n    /*\"copy\"*/\n  ];\n\n  const undefinedFunctions = mandatoryFunctions.filter(f => {\n    return !typeDefinition[f];\n  });\n\n  if (undefinedFunctions.length > 0) {\n    throw new Error(\n      `createType expect type definition to implements the following functions: ${undefinedFunctions.join(\n        ', '\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n\n  return typeDefinition;\n}\n","import { createType } from './create-type';\n\n/**\n * Standard types\n */\nexport const standardTypes = {\n  number: createType({\n    baseType: Number,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : 0;\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = 0;\n      }\n    },\n    clear: (src, key) => {\n      src[key] = 0;\n    }\n  }),\n  boolean: createType({\n    baseType: Boolean,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : false;\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = false;\n      }\n    },\n    clear: (src, key) => {\n      src[key] = false;\n    }\n  }),\n  string: createType({\n    baseType: String,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : '';\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = '';\n      }\n    },\n    clear: (src, key) => {\n      src[key] = '';\n    }\n  }),\n  array: createType({\n    baseType: Array,\n    create: defaultValue => {\n      if (typeof defaultValue !== 'undefined') {\n        return defaultValue.slice();\n      }\n\n      return [];\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue.slice();\n      } else {\n        src[key].length = 0;\n      }\n    },\n    clear: (src, key) => {\n      src[key].length = 0;\n    },\n    copy: (src: any, dst: any, key: string) => {\n      src[key] = dst[key].slice();\n    }\n  }),\n};\n\n","import { TypeDefinition } from './create-type';\nimport { standardTypes } from './standard-types';\n\n/**\n * Try to infer the type of the value\n * @return Type of the attribute\n */\nexport function inferType(value: unknown): TypeDefinition<NumberConstructor | BooleanConstructor | BooleanConstructor | ArrayConstructor> {\n  if (Array.isArray(value)) {\n    return standardTypes.array;\n  } else if (standardTypes[typeof value]) {\n    return standardTypes[typeof value];\n  } else {\n    return null;\n  }\n}\n","import { ComponentConstructor } from '../component.interface';\nimport { inferType } from './infer-type';\n\nexport function createComponentClass(schema: any, name: string): ComponentConstructor {\n  // var Component = new Function(`return function ${name}() {}`)();\n\n  for (const key in schema) {\n    if (schema.hasOwnProperty(key)) {\n\n      const type = schema[key].type;\n      if (!type) {\n        schema[key].type = inferType(schema[key].default);\n      }\n    }\n  }\n\n  const Component = function() {\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        const type = attr.type;\n        if (type && type.isType) {\n          this[key] = type.create(attr.default);\n        } else {\n          this[key] = attr.default;\n        }\n\n      }\n    }\n  };\n\n  if (typeof name !== 'undefined') {\n    Object.defineProperty(Component, 'name', { value: name });\n  }\n\n  Component.prototype.schema = schema;\n\n  let knownTypes = true;\n  for (const key in schema) {\n    if (schema.hasOwnProperty(key)) {\n\n      const attr = schema[key];\n      if (!attr.type) {\n        attr.type = inferType(attr.default);\n      }\n\n      const type = attr.type;\n      if (!type) {\n        console.warn(`Unknown type definition for attribute '${key}'`);\n        knownTypes = false;\n      }\n\n    }\n  }\n\n  if (!knownTypes) {\n    console.warn(\n      `This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'`\n    );\n\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        Component.prototype[key] = attr.default;\n\n      }\n    }\n  } else {\n    Component.prototype.copy = function(src) {\n\n      for (const key in schema) {\n        if (src[key]) {\n          const type = schema[key].type;\n          if (type.isSimpleType) {\n            this[key] = src[key];\n          } else if (type.copy) {\n            type.copy(this, src, key);\n          } else {\n            // @todo Detect that it's not possible to copy all the attributes\n            // and just avoid creating the copy function\n            console.warn(\n              `Unknown copy function for attribute '${key}' data type`\n            );\n          }\n        }\n      }\n    };\n\n    Component.prototype.reset = function() {\n      for (const key in schema) {\n        if (schema.hasOwnProperty(key)) {\n\n          const attr = schema[key];\n          const type = attr.type;\n          if (type.reset) { type.reset(this, key, attr.default); }\n\n        }\n      }\n    };\n\n    Component.prototype.clear = function() {\n      for (const key in schema) {\n        if (schema.hasOwnProperty(key)) {\n\n          const type = schema[key].type;\n          if (type.clear) { type.clear(this, key); }\n\n        }\n      }\n    };\n\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        const type = attr.type;\n        Component.prototype[key] = attr.default;\n\n        if (type.reset) {\n          type.reset(Component.prototype, key, attr.default);\n        }\n\n      }\n    }\n  }\n\n  return Component as any;\n}\n","import { version } from '../package.json';\n\nexport const Version = version;"],"names":[],"mappings":"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"}