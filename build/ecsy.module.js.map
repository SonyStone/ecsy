{"version":3,"file":"ecsy.module.js","sources":["../src/utils/object-pool.ts","../src/component/dummy-object-pool.ts","../src/component/component-manager.ts","../src/utils/get-name.ts","../src/utils/query-key.ts","../src/entity/event-dispatcher.ts","../src/entity/query.ts","../src/entity/entity.ts","../src/entity/system-state-component.ts","../src/entity/entity-manager.ts","../src/entity/query-manager.ts","../src/system/can-execute.ts","../src/system/clear-events.ts","../src/system/system-manager.ts","../src/system/system.ts","../src/world.ts","../src/not.ts","../src/tag-component.ts","../src/schema/create-type.ts","../src/schema/standard-types.ts","../src/schema/infer-type.ts","../src/schema/create-component-class.ts","../src/version.ts"],"sourcesContent":["import { Pool } from '../pool.interface';\nimport { Resettable } from '../resettable.interface';\n\nexport class ObjectPool<T extends Resettable> implements Pool<T> {\n  count = 0;\n  private freeList: T[] = [];\n\n  private createElement: () => T;\n\n  // @todo Add initial size\n  constructor(\n    objectConstructor: new (...args) => T,\n    initialSize?: number,\n  ) {\n\n    let extraArgs = null;\n\n    if (arguments.length > 1) {\n      extraArgs = Array.prototype.slice.call(arguments);\n      extraArgs.shift();\n    }\n\n    this.createElement = extraArgs\n      ? () => new objectConstructor(...extraArgs)\n      : () => new objectConstructor();\n\n    if (typeof initialSize !== 'undefined') {\n      this.expand(initialSize);\n    }\n  }\n\n  aquire(): T {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    const item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item: T): void {\n    if (item.reset) {\n      item.reset();\n    }\n    this.freeList.push(item);\n  }\n\n  private expand(count: number): void {\n    for (let n = 0; n < count; n++) {\n      this.freeList.push(this.createElement());\n    }\n    this.count += count;\n  }\n\n  totalSize(): number {\n    return this.count;\n  }\n\n  totalFree(): number {\n    return this.freeList.length;\n  }\n\n  totalUsed(): number {\n    return this.count - this.freeList.length;\n  }\n}\n","import { Pool } from '../pool.interface';\nimport { Resettable } from '../resettable.interface';\n\nexport class DummyObjectPool<T extends Resettable> implements Pool<T> {\n  count = 0;\n  private used = 0;\n\n  constructor(\n    private objectConstructor: new (...args: any[]) => T\n  ) {}\n\n  aquire(): T {\n    this.used++;\n    this.count++;\n\n    return new this.objectConstructor();\n  }\n\n  release(): void {\n    this.used--;\n  }\n\n  totalSize(): number {\n    return this.count;\n  }\n\n  totalFree(): number {\n    return Infinity;\n  }\n\n  totalUsed(): number {\n    return this.used;\n  }\n}\n","import { Component, ComponentConstructor } from '../component.interface';\nimport { ObjectPool } from '../utils/object-pool';\nimport { Pool } from '../pool.interface';\nimport { DummyObjectPool } from './dummy-object-pool';\n\n// TODO: add removeComponent method\nexport class ComponentManager {\n  componentConstructors = new Set<ComponentConstructor>();\n  componentPool = new Map<ComponentConstructor, Pool<Component>>();\n\n  registerComponent(componentConstructor: ComponentConstructor): void {\n    if (this.componentConstructors.has(componentConstructor)) {\n      console.warn(`Component type: '${componentConstructor.name}' already registered.`);\n\n      return;\n    }\n\n    this.componentConstructors.add(componentConstructor);\n  }\n\n  componentAddedToEntity(componentConstructor: ComponentConstructor): void {\n    if (!this.componentConstructors.has(componentConstructor)) {\n      this.registerComponent(componentConstructor);\n    }\n  }\n\n  getComponentsPool(componentConstructor: ComponentConstructor): Pool<Component> {\n\n    if (!this.componentPool.has(componentConstructor)) {\n\n      if (componentConstructor.prototype.reset) {\n\n        this.componentPool.set(componentConstructor, new ObjectPool(componentConstructor));\n\n      } else {\n        console.warn(\n          `Component '${componentConstructor.name}' won't benefit from pooling because 'reset' method was not implemeneted.`\n        );\n\n        this.componentPool.set(componentConstructor, new DummyObjectPool(componentConstructor));\n      }\n    }\n\n    return this.componentPool.get(componentConstructor);\n  }\n}\n","import { ComponentConstructor } from '../component.interface';\n\n/**\n * Return the name of a component\n */\nexport function getName(componentConstructor: ComponentConstructor) {\n  return componentConstructor.name;\n}\n","import { Components } from '../component.interface';\nimport { getName } from './get-name';\n\n/**\n * Get a key from a list of components\n * @param Components Array of components to generate the key\n */\nexport function queryKey(componentConstructor: Components[]) {\n  const names = [];\n\n  for (const T of componentConstructor) {\n    if (typeof T === 'object') {\n      const operator = T.operator === 'not' ? '!' : T.operator;\n      names.push(operator + getName(T.component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names.sort().join('-');\n}\n","import { Component } from '../component.interface';\nimport { Entity } from './entity';\n\ntype Listener = (entity: Entity, component?: Component) => void;\n\n/**\n * EventDispatcher\n */\nexport class EventDispatcher<T> {\n  listeners = new Map<T, Listener[]>();\n\n  stats = {\n    fired: 0,\n    handled: 0\n  };\n\n  constructor() {\n  }\n\n  /**\n   * Add an event listener\n   * @param eventName Name of the event to listen\n   * @param listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName: T, listener: Listener) {\n    const listeners = this.listeners;\n\n    if (!listeners.has(eventName)) {\n      listeners.set(eventName, []);\n    }\n\n    const listenerArray = listeners.get(eventName);\n\n    if (listenerArray.indexOf(listener) === -1) {\n      listenerArray.push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param eventName Name of the event to check\n   * @param listener Callback for the specified event\n   */\n  hasEventListener(eventName: T, listener: Listener) {\n    return (\n      this.listeners.has(eventName) && this.listeners.get(eventName).indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param eventName Name of the event to remove\n   * @param listener Callback for the specified event\n   */\n  removeEventListener(eventName: T, listener: Listener) {\n    const listenerArray = this.listeners.get(eventName);\n\n    if (listenerArray !== undefined) {\n      const index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param eventName Name of the event to dispatch\n   * @param entity (Optional) Entity to emit\n   */\n  dispatchEvent(eventName: T, entity?: Entity, component?: Component) {\n    this.stats.fired++;\n\n    const listenerArray = this.listeners.get(eventName);\n\n    if (listenerArray !== undefined) {\n      const array = listenerArray.slice(0);\n\n      for (const value of array) {\n        value.call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n","import { ComponentConstructor, Components } from '../component.interface';\nimport { Entity } from './entity';\nimport { EventDispatcher } from './event-dispatcher';\n\n// tslint:disable:no-bitwise\n\nexport enum QueryEvents {\n  ENTITY_ADDED,\n  ENTITY_REMOVED,\n  COMPONENT_CHANGED,\n}\n\nexport class Query {\n\n  componentConstructors: ComponentConstructor[] = [];\n  notComponentConstructor: ComponentConstructor[] = [];\n\n  entities: Entity[] = [];\n\n  eventDispatcher = new EventDispatcher<QueryEvents>();\n\n  // This query is being used by a reactive system\n  reactive = false;\n\n  /**\n   * @param componentConstructors List of types of components to query\n   */\n  constructor(\n    componentConstructors: Components[],\n    entities: Entity[],\n    public key: string,\n  ) {\n\n    componentConstructors.forEach((componentConstructor) => {\n      if (typeof componentConstructor === 'object') {\n        this.notComponentConstructor.push(componentConstructor.component);\n      } else {\n        this.componentConstructors.push(componentConstructor);\n      }\n    });\n\n    if (this.componentConstructors.length === 0) {\n      throw new Error('Can\\'t create a query without components');\n    }\n\n    // Fill the query with the existing entities\n    for (const entity of entities) {\n      if (this.match(entity)) {\n\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   */\n  addEntity(entity: Entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(QueryEvents.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   */\n  removeEntity(entity: Entity) {\n    let index = this.entities.indexOf(entity);\n\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(QueryEvents.ENTITY_REMOVED, entity);\n    }\n  }\n\n  match(entity: Entity) {\n    return (\n      entity.hasAllComponents(this.componentConstructors) &&\n      !entity.hasAnyComponents(this.notComponentConstructor)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.componentConstructors.map(C => C.name),\n        not: this.notComponentConstructor.map(C => C.name)\n      },\n      numEntities: this.entities.length\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.componentConstructors.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\n","import { Component, ComponentConstructor } from '../component.interface';\nimport { Resettable } from '../resettable.interface';\nimport { EntityManager } from './entity-manager';\nimport { Query, QueryEvents } from './query';\nimport { wrapImmutableComponent } from './wrap-immutable-component';\n\n// tslint:disable:no-bitwise\n\n// @todo Take this out from there or use ENV\nconst DEBUG = false;\n\nlet nextId = 0;\n\nexport class Entity implements Resettable {\n  // Unique ID for this entity\n  id = nextId++;\n\n  // List of components types the entity has\n  componentTypes = new Set<ComponentConstructor>();\n\n  // Instance of the components\n  components = new Map<string, Component>();\n\n  componentsToRemove = new Map<string, Component>();\n\n  // Queries where the entity is added\n  queries: Query[] = [];\n\n  // Used for deferred removal\n  componentTypesToRemove = new Set<ComponentConstructor>();\n\n  alive = false;\n\n  constructor(\n    public entityManager: EntityManager,\n  ) {}\n\n  // COMPONENTS\n\n  getComponent(componentConstructor: ComponentConstructor, includeRemoved?: boolean): Component {\n    let component = this.components.get(componentConstructor.name);\n\n    if (!component && includeRemoved === true) {\n      component = this.componentsToRemove.get(componentConstructor.name);\n    }\n\n    return DEBUG ? wrapImmutableComponent(component) : component;\n  }\n\n  getMutableComponent(componentConstructor: ComponentConstructor): Component {\n    const component = this.components.get(componentConstructor.name);\n\n    for (const query of this.queries) {\n\n      // @todo accelerate this check. Maybe having query._Components as an object\n      if (query.reactive && query.componentConstructors.indexOf(componentConstructor) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          QueryEvents.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Once a component is removed from an entity, it is possible to access its contents\n   */\n  getRemovedComponent(componentConstructor: ComponentConstructor): Component {\n    return this.componentsToRemove.get(componentConstructor.name);\n  }\n\n  getComponents(): Map<string, Component> {\n    return this.components;\n  }\n\n  getComponentsToRemove(): Map<string, Component> {\n    return this.componentsToRemove;\n  }\n\n  getComponentTypes(): Set<ComponentConstructor> {\n    return this.componentTypes;\n  }\n\n\n  addComponent(componentConstructor: ComponentConstructor, values?: { [key: string]: any }): this {\n    this.entityManager.entityAddComponent(this, componentConstructor, values);\n\n    return this;\n  }\n\n  /**\n   * This will mark the component to be removed and will populate all the queues from the\n   * systems that are listening to that event, but the component itself won't be disposed\n   * until the end of the frame, we call it deferred removal. This is done so systems that\n   * need to react to it can still access the data of the components.\n   */\n  removeComponent(componentConstructor: ComponentConstructor, forceRemove?: boolean): this {\n    this.entityManager.entityRemoveComponent(this, componentConstructor, forceRemove);\n\n    return this;\n  }\n\n  hasComponent(componentConstructor: ComponentConstructor, includeRemoved?: boolean): boolean {\n    return (\n      this.componentTypes.has(componentConstructor) ||\n      (includeRemoved === true && this.hasRemovedComponent(componentConstructor))\n    );\n  }\n\n  hasRemovedComponent(componentConstructor: ComponentConstructor): boolean {\n    return this.componentTypesToRemove.has(componentConstructor);\n  }\n\n  hasAllComponents(componentConstructors: ComponentConstructor[]): boolean {\n    for (const component of componentConstructors) {\n      if (!this.hasComponent(component)) { return false; }\n    }\n\n    return true;\n  }\n\n  hasAnyComponents(componentConstructors: ComponentConstructor[]): boolean {\n    for (const component of componentConstructors) {\n      if (this.hasComponent(component)) { return true; }\n    }\n\n    return false;\n  }\n\n  removeAllComponents(forceRemove?: boolean) {\n    return this.entityManager.entityRemoveAllComponents(this, forceRemove);\n  }\n\n  // EXTRAS\n\n  // Initialize the entity. To be used when returning an entity to the pool\n  reset() {\n    this.id = nextId++;\n    this.entityManager = null;\n    this.componentTypes.clear();\n    this.queries.length = 0;\n    this.components.clear();\n  }\n\n  remove(forceRemove?: boolean) {\n    return this.entityManager.removeEntity(this, forceRemove);\n  }\n}\n","\n/**\n * Components that extend the SystemStateComponent are not removed when an entity is deleted.\n *\n * System State Components (SSC) are components used by a system to hold internal resources\n * for an entity. They are not removed when you delete the entity, you must explicitly remove\n * them when you are done with them. They can be used to detect when an entity has been added\n * or removed from a query.\n */\nexport class SystemStateComponent {\n  static isSystemStateComponent = true;\n}\n\n","import { ComponentManager } from '../component';\nimport { ComponentConstructor, Components } from '../component.interface';\nimport { getName } from '../utils';\nimport { ObjectPool } from '../utils/object-pool';\nimport { Entity } from './entity';\nimport { EventDispatcher } from './event-dispatcher';\nimport { Query } from './query';\nimport { QueryManager } from './query-manager';\nimport { SystemStateComponent } from './system-state-component';\n\n// tslint:disable:no-bitwise\n\nexport enum EntityManagerEvents {\n  ENTITY_CREATED,\n  ENTITY_REMOVED,\n  COMPONENT_ADDED,\n  COMPONENT_REMOVE,\n}\n\n/**\n * EntityManager\n */\nexport class EntityManager {\n\n  // All the entities in this instance\n  entities: Entity[] = [];\n\n  eventDispatcher = new EventDispatcher<EntityManagerEvents>();\n  entityPool = new ObjectPool<Entity>(Entity);\n\n  // Deferred deletion\n  entitiesWithComponentsToRemove = new Set<Entity>();\n  entitiesToRemove: Entity[] = [];\n  deferredRemovalEnabled = true;\n\n  numStateComponents = 0;\n\n  constructor(\n    private componentManager: ComponentManager,\n    private queryManager: QueryManager,\n  ) {}\n\n  /**\n   * Create a new entity\n   */\n  createEntity(): Entity {\n    const entity = this.entityPool.aquire();\n\n    entity.alive = true;\n    entity.entityManager = this;\n    this.entities.push(entity);\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.ENTITY_CREATED, entity);\n\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param entity Entity where the component will be added\n   * @param componentConstructor Component to be added to the entity\n   * @param values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity: Entity, componentConstructor: ComponentConstructor, values?: { [key: string]: any }): void {\n\n    if (entity.componentTypes.has(componentConstructor)) {\n\n      return;\n    }\n\n    entity.componentTypes.add(componentConstructor);\n\n    if ((componentConstructor as any).__proto__ === SystemStateComponent) {\n      this.numStateComponents++;\n    }\n\n    const componentPool = this.componentManager.getComponentsPool(\n      componentConstructor\n    );\n\n    const componentFromPool = componentPool.aquire();\n\n    entity.components.set(componentConstructor.name, componentFromPool);\n\n    if (values) {\n      if (componentFromPool.copy) {\n        componentFromPool.copy(values);\n      } else {\n        for (const name in values) {\n          if (values.hasOwnProperty(name)) {\n            componentFromPool[name] = values[name];\n          }\n        }\n      }\n    }\n\n    this.queryManager.onEntityComponentAdded(entity, componentConstructor);\n    this.componentManager.componentAddedToEntity(componentConstructor);\n\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.COMPONENT_ADDED, entity, componentConstructor);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param entity Entity which will get removed the component\n   * @param componentConstructor Component to remove from the entity\n   * @param immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity: Entity, componentConstructor: ComponentConstructor, immediately?: boolean): void {\n    if (!entity.componentTypes.has(componentConstructor)) {\n\n      return;\n    }\n\n    this.eventDispatcher.dispatchEvent(EntityManagerEvents.COMPONENT_REMOVE, entity, componentConstructor);\n\n    if (immediately) {\n\n      this.entityRemoveComponentSync(entity, componentConstructor);\n\n    } else {\n\n      if (entity.componentTypesToRemove.size === 0) {\n        this.entitiesWithComponentsToRemove.add(entity);\n      }\n\n      entity.componentTypes.delete(componentConstructor);\n      entity.componentTypesToRemove.add(componentConstructor);\n\n      const componentName = getName(componentConstructor);\n      entity.componentsToRemove.set(componentName, entity.components.get(componentName));\n\n      entity.components.delete(componentName);\n\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this.queryManager.onEntityComponentRemoved(entity, componentConstructor);\n\n    if ((componentConstructor as any).__proto__ === SystemStateComponent) {\n      this.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (this.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  entityRemoveComponentSync(entity: Entity, componentConstructor: ComponentConstructor): void {\n    // Remove T listing on entity and property ref, then free the component.\n    entity.componentTypes.delete(componentConstructor);\n    const componentName = getName(componentConstructor);\n    const componentEntity = entity.components.get(componentName);\n    entity.components.delete(componentName);\n\n    this.componentManager.componentPool.get(componentConstructor).release(componentEntity);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity: Entity, immediately?: boolean): void {\n    for (const componentType of entity.componentTypes) {\n      if ((componentType as any).__proto__ !== SystemStateComponent) {\n        this.entityRemoveComponent(entity, componentType, immediately);\n      }\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param entity Entity to remove from the manager\n   * @param immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity: Entity, immediately?: boolean): void {\n    const index = this.entities.indexOf(entity);\n\n    if (!~index) { throw new Error('Tried to remove entity not in list'); }\n\n    entity.alive = false;\n\n    if (this.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(EntityManagerEvents.ENTITY_REMOVED, entity);\n      this.queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this.releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n\n    this.entityRemoveAllComponents(entity, immediately);\n  }\n\n  private releaseEntity(entity: Entity, index): void {\n    this.entities.splice(index, 1);\n\n    // Prevent any access and free\n    entity.entityManager = null;\n    this.entityPool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities(): void {\n    for (let i = this.entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this.entities[i]);\n    }\n  }\n\n  processDeferredRemoval(): void {\n    if (!this.deferredRemovalEnabled) {\n      return;\n    }\n\n    for (const entity of this.entitiesToRemove) {\n      const index = this.entities.indexOf(entity);\n      this.releaseEntity(entity, index);\n    }\n\n    this.entitiesToRemove.length = 0;\n\n    for (const entity of this.entitiesWithComponentsToRemove) {\n      for (const componentTypeToRemove of entity.componentTypesToRemove) {\n\n        const componentName = getName(componentTypeToRemove);\n\n        const component = entity.componentsToRemove.get(componentName);\n        entity.componentsToRemove.delete(componentName);\n\n        this.componentManager.componentPool.get(componentTypeToRemove).release(component);\n      }\n\n      entity.componentTypesToRemove.clear();\n    }\n\n    this.entitiesWithComponentsToRemove.clear();\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param componentConstructors List of components that will form the query\n   */\n  getQuery(componentConstructors: Components[]): Query {\n    return this.queryManager.getQuery(componentConstructors, this.entities);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count(): number {\n    return this.entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    const stats = {\n      numEntities: this.entities.length,\n      numQueries: Object.keys(this.queryManager.queries).length,\n      queries: this.queryManager.stats(),\n      numComponentPool: Object.keys(this.componentManager.componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats\n    };\n\n    for (const [cname, _] of this.componentManager.componentPool) {\n\n      const pool = this.componentManager.componentPool.get(cname);\n      stats.componentPool[cname.name] = {\n        used: pool.totalUsed(),\n        size: pool.count\n      };\n\n    }\n\n    return stats;\n  }\n}\n\n","import { ComponentConstructor, Components } from '../component.interface';\nimport { queryKey } from '../utils';\nimport { Entity } from './entity';\nimport { Query } from './query';\n\n// tslint:disable:no-bitwise\n\n/**\n * QueryManager\n */\nexport class QueryManager {\n  // Queries indexed by a unique identifier for the components it has\n  queries = new Map<string, Query>();\n\n  constructor() {}\n\n  onEntityRemoved(entity: Entity): void {\n    for (const [_, query] of this.queries) {\n\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param entity Entity that just got the new component\n   * @param componentConstructor Component added to the entity\n   */\n  onEntityComponentAdded(entity: Entity, componentConstructor: ComponentConstructor): void {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (const [_, query] of this.queries) {\n\n        if (\n          !!~query.notComponentConstructor.indexOf(componentConstructor) &&\n          ~query.entities.indexOf(entity)\n        ) {\n          query.removeEntity(entity);\n          continue;\n        }\n\n        // Add the entity only if:\n        // Component is in the query\n        // and Entity has ALL the components of the query\n        // and Entity is not already in the query\n        if (\n          !~query.componentConstructors.indexOf(componentConstructor) ||\n          !query.match(entity) ||\n          ~query.entities.indexOf(entity)\n        ) {\n          continue;\n        }\n\n\n\n        query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param entity Entity to remove the component from\n   * @param componentConstructor Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity: Entity, componentConstructor: ComponentConstructor): void {\n    for (const [_, query] of this.queries) {\n\n      if (\n        !!~query.notComponentConstructor.indexOf(componentConstructor) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.componentConstructors.indexOf(componentConstructor) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param componentConstructors Components that the query should have\n   */\n  getQuery(componentConstructors: Components[], entities: Entity[]): Query {\n    const key = queryKey(componentConstructors);\n\n    let query = this.queries.get(key);\n\n    if (!query) {\n      query = new Query(componentConstructors, entities, key);\n\n      this.queries.set(key, query);\n    }\n\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats(): { [key: string]: Query; } {\n    const stats = {};\n    for (const [queryName, query] of this.queries) {\n\n      stats[queryName] = query.stats();\n    }\n\n    return stats;\n  }\n}\n","import { System } from './system';\r\n\r\n\r\nexport const canExecute = (system: System) => {\r\n  if (system.mandatoryQueries.length === 0) { return true; }\r\n\r\n  for (const query of system.mandatoryQueries) {\r\n    if (query.entities.length === 0) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","import { System } from './system';\r\n\r\nexport const clearEvents = (system: System) => {\r\n\r\n  for (const queryName in system.queries) {\r\n    if (system.queries.hasOwnProperty(queryName)) {\r\n\r\n      const query = system.queries[queryName];\r\n\r\n      if (query.added) {\r\n        query.added.length = 0;\r\n      }\r\n\r\n      if (query.removed) {\r\n        query.removed.length = 0;\r\n      }\r\n\r\n      if (query.changed) {\r\n        if (Array.isArray(query.changed)) {\r\n\r\n          query.changed.length = 0;\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { ComponentConstructor } from '../component.interface';\r\nimport { EntityManager } from '../entity';\r\nimport { QueryEvents } from '../entity/query';\r\nimport { SystemConstructor } from '../system.interface';\r\nimport { canExecute } from './can-execute';\r\nimport { clearEvents } from './clear-events';\r\nimport { System } from './system';\r\n\r\n// tslint:disable:no-bitwise\r\n\r\nexport class SystemManager {\r\n  systems = new Map<SystemConstructor<System>, System>();\r\n\r\n  // order is important\r\n  private executeSystems: System[] = []; // Systems that have `execute` method\r\n\r\n  lastExecutedSystem = null;\r\n\r\n  constructor(\r\n    private entityManager: EntityManager,\r\n  ) {}\r\n\r\n  registerSystem(systemConstructor: SystemConstructor<System>, attributes?: any) {\r\n    if (this.systems.has(systemConstructor)) {\r\n      console.warn(`System '${systemConstructor.name}' already registered.`);\r\n\r\n      return this;\r\n    }\r\n\r\n    const system = new systemConstructor();\r\n\r\n    // ----------\r\n\r\n    if (attributes && attributes.priority) {\r\n      system.priority = attributes.priority;\r\n    }\r\n\r\n\r\n\r\n    if (systemConstructor.queries) {\r\n      system.queriesOther = [];\r\n      system.queries = {};\r\n\r\n      for (const queryName in systemConstructor.queries) {\r\n        if (systemConstructor.queries.hasOwnProperty(queryName)) {\r\n\r\n          const queryConfig = systemConstructor.queries[queryName];\r\n\r\n          const components = queryConfig.components;\r\n\r\n          if (!components || components.length === 0) {\r\n            throw new Error('\\'components\\' attribute can\\'t be empty in a query');\r\n          }\r\n\r\n          const query = this.entityManager.getQuery(components);\r\n\r\n          system.queriesOther[queryName] = query;\r\n\r\n          if (queryConfig.mandatory === true) {\r\n            system.mandatoryQueries.push(query);\r\n          }\r\n\r\n          system.queries[queryName] = {\r\n            results: query.entities\r\n          };\r\n\r\n          const events = {\r\n            added: () => {\r\n              const eventList = (system.queries[queryName].added = []);\r\n\r\n              query.eventDispatcher.addEventListener(QueryEvents.ENTITY_ADDED,\r\n                (entity) => {\r\n\r\n                  // @fixme overhead?\r\n                  if (eventList.indexOf(entity) === -1) {\r\n\r\n                    eventList.push(entity);\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            removed: () => {\r\n              const eventList = (system.queries[queryName].removed = []);\r\n\r\n              query.eventDispatcher.addEventListener(QueryEvents.ENTITY_REMOVED,\r\n                (entity) => {\r\n\r\n                  // @fixme overhead?\r\n                  if (eventList.indexOf(entity) === -1) {\r\n\r\n                    eventList.push(entity);\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            changed: () => {\r\n              const event = queryConfig.listen.changed;\r\n\r\n              query.reactive = true;\r\n              if (event === true) {\r\n                // Any change on the entity from the components in the query\r\n                const eventList = (system.queries[queryName].changed = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  QueryEvents.COMPONENT_CHANGED,\r\n                  (entity) => {\r\n                    // Avoid duplicates\r\n                    if (eventList.indexOf(entity) === -1) {\r\n                      eventList.push(entity);\r\n                    }\r\n                  }\r\n                );\r\n              } else if (Array.isArray(event)) {\r\n                const eventList = (system.queries[queryName].changed = []);\r\n\r\n                query.eventDispatcher.addEventListener(\r\n                  QueryEvents.COMPONENT_CHANGED,\r\n                  (entity, changedComponent) => {\r\n                    // Avoid duplicates\r\n                    if (\r\n                      event.indexOf(changedComponent.constructor as ComponentConstructor) !== -1 &&\r\n                      eventList.indexOf(entity) === -1\r\n                    ) {\r\n                      eventList.push(entity);\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                /*\r\n                // Checking just specific components\r\n                let changedList = (this.queries[queryName][eventName] = {});\r\n                event.forEach(component => {\r\n                  let eventList = (changedList[\r\n                    componentPropertyName(component)\r\n                  ] = []);\r\n                  query.eventDispatcher.addEventListener(\r\n                    Query.prototype.COMPONENT_CHANGED,\r\n                    (entity, changedComponent) => {\r\n                      if (\r\n                        changedComponent.constructor === component &&\r\n                        eventList.indexOf(entity) === -1\r\n                      ) {\r\n                        eventList.push(entity);\r\n                      }\r\n                    }\r\n                  );\r\n                });\r\n                */\r\n              }\r\n            }\r\n          };\r\n\r\n          if (queryConfig.listen) {\r\n            for (const eventName in queryConfig.listen) {\r\n              if (queryConfig.listen.hasOwnProperty(eventName) && events[eventName]) {\r\n                events[eventName]();\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // ----------\r\n\r\n    if (system.init) {\r\n      system.init();\r\n    }\r\n\r\n    system.order = this.systems.size;\r\n    this.systems.set(systemConstructor, system);\r\n\r\n    if (system.run) {\r\n      this.executeSystems.push(system);\r\n      this.sortSystems();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  sortSystems() {\r\n    this.executeSystems.sort((a, b) => {\r\n      return a.priority - b.priority || a.order - b.order;\r\n    });\r\n  }\r\n\r\n  getSystem(systemConstructor: SystemConstructor<System>): System {\r\n    return this.systems.get(systemConstructor);\r\n  }\r\n\r\n  getSystems(): Map<SystemConstructor<System>, System> {\r\n    return this.systems;\r\n  }\r\n\r\n  removeSystem(systemConstructor: SystemConstructor<System>): void {\r\n    this.systems.delete(systemConstructor);\r\n  }\r\n\r\n  runSystem(system: System): void {\r\n\r\n    if (system.initialized) {\r\n      if (canExecute(system)) {\r\n        const startTime = performance.now(); // ! debag performance\r\n\r\n        // main run;\r\n        system.run();\r\n\r\n        system.executeTime = performance.now() - startTime; // ! debag performance\r\n        this.lastExecutedSystem = system;\r\n\r\n        clearEvents(system);\r\n      }\r\n    }\r\n  }\r\n\r\n  stop(): void {\r\n    for (const system of this.executeSystems) {\r\n      system.stop();\r\n      system.executeTime = 0; // ! debag performance\r\n    }\r\n  }\r\n\r\n  run(forcePlay?: boolean): void {\r\n    for (const system of this.executeSystems) {\r\n      if (forcePlay || system.enabled) {\r\n        this.runSystem(system);\r\n      }\r\n    }\r\n  }\r\n\r\n  stats() {\r\n    const stats = {\r\n      numSystems: this.systems.size,\r\n      systems: {}\r\n    };\r\n\r\n    for (const system of this.systems) {\r\n      const systemStats = (stats.systems[system.constructor.name] = {\r\n        queries: {}\r\n      });\r\n\r\n      for (const name in (system as any).ctx) {\r\n        if ((system as any).ctx.hasOwnProperty(name)) {\r\n          systemStats.queries[name] = (system as any).ctx[name].stats();\r\n        }\r\n      }\r\n    }\r\n\r\n    return stats;\r\n  }\r\n}\r\n","import { Query } from '../system.interface';\nimport { Entity } from 'src/entity';\n\nexport interface ResultQuery {\n  [key: string]: {\n    /**\n     * All the entities with selected component\n     */\n    results: Entity[];\n    /**\n     * All the entities added to the query since the last call\n     */\n    added?: Entity[];\n    /**\n     * All the entities removed from the query since the last call\n     */\n    removed?: Entity[];\n    /**\n     * All the entities which selected components have changed since the last call\n     */\n    changed?: Entity[];\n  }\n}\n\n/**\n * A system that manipulates entities in the world.\n * Every run systems are executed and they create, remove or modify entities and components.\n */\nexport abstract class System {\n\n  static queries?: Query;\n\n  /**\n   * Whether the system will execute during the world tick.\n   */\n  enabled = true;\n  initialized = true;\n\n  queriesOther = {};\n  queries: ResultQuery = {};\n\n  mandatoryQueries = [];\n\n  priority = 0;\n  order = 0;\n\n  executeTime?: number;\n\n  /**\n   * It will get called each run by default (unless a custom scheduler is being used).\n   * Usually it will be used to loop through the lists of entities from each query and\n   * process the value of theirs components.\n   */\n  run?(): void;\n\n  /**\n   * This function is called when the system is registered in a world (Calling `world.registerSystem`)\n   * and can be used to initialize anything the system needs.\n   */\n  init?(): void;\n\n  /**\n   * Resume execution of this system.\n   */\n  play() {\n    this.enabled = true;\n  }\n\n  /**\n   * Stop execution of this system.\n   */\n  stop() {\n    this.enabled = false;\n  }\n}\n","import { ComponentManager } from './component';\r\nimport { ComponentConstructor } from './component.interface';\r\nimport { Entity, EntityManager } from './entity';\r\nimport { QueryManager } from './entity/query-manager';\r\nimport { System, SystemManager } from './system';\r\nimport { SystemConstructor } from './system.interface';\r\n\r\n/**\r\n * The World is the root of the ECS.\r\n */\r\nexport class World {\r\n\r\n  enabled = true;\r\n\r\n  eventQueues = {};\r\n\r\n  lastTime = performance.now();\r\n\r\n  /**\r\n   * Create a new World.\r\n   */\r\n  constructor(\r\n    public componentsManager = new ComponentManager(),\r\n    public entityManager = new EntityManager(componentsManager, new QueryManager()),\r\n    public systemManager = new SystemManager(entityManager),\r\n  ) {}\r\n\r\n  /**\r\n   * Register a component.\r\n   * @param component Type of component to register\r\n   */\r\n  registerComponent(component: ComponentConstructor): this {\r\n    this.componentsManager.registerComponent(component);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Register a system.\r\n   * @param system Type of system to register\r\n   */\r\n  registerSystem<T extends System>(system: SystemConstructor<T>, attributes?: any): this {\r\n    this.systemManager.registerSystem(system, attributes);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a system registered in this world.\r\n   * @param System Type of system to get.\r\n   */\r\n  getSystem<T extends System>(SystemClass: SystemConstructor<T>): System {\r\n    return this.systemManager.getSystem(SystemClass);\r\n  }\r\n\r\n  /**\r\n   * Get a list of systems registered in this world.\r\n   */\r\n  getSystems(): Map<SystemConstructor<any>, System> {\r\n    return this.systemManager.getSystems();\r\n  }\r\n\r\n  /**\r\n   * Update the systems.\r\n   */\r\n  run(): void {\r\n    if (this.enabled) {\r\n      this.systemManager.run();\r\n      this.entityManager.processDeferredRemoval();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop execution of this world.\r\n   */\r\n  stop(): void {\r\n    this.enabled = false;\r\n  }\r\n\r\n  /**\r\n   * Resume execution of this world.\r\n   */\r\n  play(): void {\r\n    this.enabled = true;\r\n  }\r\n\r\n  /**\r\n   * Create a new entity\r\n   */\r\n  createEntity(): Entity {\r\n    return this.entityManager.createEntity();\r\n  }\r\n\r\n  stats() {\r\n    const stats = {\r\n      entities: this.entityManager.stats(),\r\n      system: this.systemManager.stats()\r\n    };\r\n\r\n    console.log(JSON.stringify(stats, null, 2));\r\n  }\r\n}\r\n","import { ComponentConstructor } from './component.interface';\n\n/**\n * Use the Not class to negate a component query.\n */\nexport const Not = (component: ComponentConstructor): NotComponent => ({\n  operator: 'not',\n  component,\n});\n\nexport interface NotComponent {\n  operator: 'not';\n  component: ComponentConstructor;\n}\n","/**\n * Create components that extend TagComponent in order to take advantage of performance optimizations for components\n * that do not store data\n */\nexport class TagComponent {\n  reset() {}\n}\n","\nexport interface TypeDefinition<T> {\n  baseType?: T;\n  isType?: boolean;\n  isSimpleType?: boolean;\n  create(defaultValue): void;\n  reset(src, key, defaultValue): void;\n  clear(src, key): void;\n  copy?(src, dst, key): void;\n}\n\nexport function createType<T>(typeDefinition: TypeDefinition<T>): TypeDefinition<T> {\n  const mandatoryFunctions = [\n    'create',\n    'reset',\n    'clear'\n    /*\"copy\"*/\n  ];\n\n  const undefinedFunctions = mandatoryFunctions.filter(f => {\n    return !typeDefinition[f];\n  });\n\n  if (undefinedFunctions.length > 0) {\n    throw new Error(\n      `createType expect type definition to implements the following functions: ${undefinedFunctions.join(\n        ', '\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n\n  return typeDefinition;\n}\n","import { createType } from './create-type';\n\n/**\n * Standard types\n */\nexport const standardTypes = {\n  number: createType({\n    baseType: Number,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : 0;\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = 0;\n      }\n    },\n    clear: (src, key) => {\n      src[key] = 0;\n    }\n  }),\n  boolean: createType({\n    baseType: Boolean,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : false;\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = false;\n      }\n    },\n    clear: (src, key) => {\n      src[key] = false;\n    }\n  }),\n  string: createType({\n    baseType: String,\n    isSimpleType: true,\n    create: defaultValue => {\n      return typeof defaultValue !== 'undefined' ? defaultValue : '';\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue;\n      } else {\n        src[key] = '';\n      }\n    },\n    clear: (src, key) => {\n      src[key] = '';\n    }\n  }),\n  array: createType({\n    baseType: Array,\n    create: defaultValue => {\n      if (typeof defaultValue !== 'undefined') {\n        return defaultValue.slice();\n      }\n\n      return [];\n    },\n    reset: (src, key, defaultValue) => {\n      if (typeof defaultValue !== 'undefined') {\n        src[key] = defaultValue.slice();\n      } else {\n        src[key].length = 0;\n      }\n    },\n    clear: (src, key) => {\n      src[key].length = 0;\n    },\n    copy: (src: any, dst: any, key: string) => {\n      src[key] = dst[key].slice();\n    }\n  }),\n};\n\n","import { TypeDefinition } from './create-type';\nimport { standardTypes } from './standard-types';\n\n/**\n * Try to infer the type of the value\n * @return Type of the attribute\n */\nexport function inferType(value: unknown): TypeDefinition<NumberConstructor | BooleanConstructor | BooleanConstructor | ArrayConstructor> {\n  if (Array.isArray(value)) {\n    return standardTypes.array;\n  } else if (standardTypes[typeof value]) {\n    return standardTypes[typeof value];\n  } else {\n    return null;\n  }\n}\n","import { ComponentConstructor } from '../component.interface';\nimport { inferType } from './infer-type';\n\nexport function createComponentClass(schema: any, name: string): ComponentConstructor {\n  // var Component = new Function(`return function ${name}() {}`)();\n\n  for (const key in schema) {\n    if (schema.hasOwnProperty(key)) {\n\n      const type = schema[key].type;\n      if (!type) {\n        schema[key].type = inferType(schema[key].default);\n      }\n    }\n  }\n\n  const Component = function() {\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        const type = attr.type;\n        if (type && type.isType) {\n          this[key] = type.create(attr.default);\n        } else {\n          this[key] = attr.default;\n        }\n\n      }\n    }\n  };\n\n  if (typeof name !== 'undefined') {\n    Object.defineProperty(Component, 'name', { value: name });\n  }\n\n  Component.prototype.schema = schema;\n\n  let knownTypes = true;\n  for (const key in schema) {\n    if (schema.hasOwnProperty(key)) {\n\n      const attr = schema[key];\n      if (!attr.type) {\n        attr.type = inferType(attr.default);\n      }\n\n      const type = attr.type;\n      if (!type) {\n        console.warn(`Unknown type definition for attribute '${key}'`);\n        knownTypes = false;\n      }\n\n    }\n  }\n\n  if (!knownTypes) {\n    console.warn(\n      `This component can't use pooling because some data types are not registered. Please provide a type created with 'createType'`\n    );\n\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        Component.prototype[key] = attr.default;\n\n      }\n    }\n  } else {\n    Component.prototype.copy = function(src) {\n\n      for (const key in schema) {\n        if (src[key]) {\n          const type = schema[key].type;\n          if (type.isSimpleType) {\n            this[key] = src[key];\n          } else if (type.copy) {\n            type.copy(this, src, key);\n          } else {\n            // @todo Detect that it's not possible to copy all the attributes\n            // and just avoid creating the copy function\n            console.warn(\n              `Unknown copy function for attribute '${key}' data type`\n            );\n          }\n        }\n      }\n    };\n\n    Component.prototype.reset = function() {\n      for (const key in schema) {\n        if (schema.hasOwnProperty(key)) {\n\n          const attr = schema[key];\n          const type = attr.type;\n          if (type.reset) { type.reset(this, key, attr.default); }\n\n        }\n      }\n    };\n\n    Component.prototype.clear = function() {\n      for (const key in schema) {\n        if (schema.hasOwnProperty(key)) {\n\n          const type = schema[key].type;\n          if (type.clear) { type.clear(this, key); }\n\n        }\n      }\n    };\n\n    for (const key in schema) {\n      if (schema.hasOwnProperty(key)) {\n\n        const attr = schema[key];\n        const type = attr.type;\n        Component.prototype[key] = attr.default;\n\n        if (type.reset) {\n          type.reset(Component.prototype, key, attr.default);\n        }\n\n      }\n    }\n  }\n\n  return Component as any;\n}\n","import { version } from '../package.json';\n\nexport const Version = version;"],"names":[],"mappings":"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"}